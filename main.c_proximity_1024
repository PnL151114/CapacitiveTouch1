//******************************************************************************
//  MSP430G2xx3 Demo - Capacitive Touch, Pin Oscillator Method, 1 button
//
//  Description: Basic 1-button input using the built-in pin oscillation feature
//  on GPIO input structure. PinOsc signal feed into TA0CLK. WDT interval is used
//  to gate the measurements. Difference in measurements indicate button touch.
//  LEDs flash if input is touched.
//
//  ACLK = VLO = 12kHz, MCLK = SMCLK = 8MHz DCO
//
//               MSP430G2xx3
//             -----------------
//         /|\|              XIN|-
//          | |                 |
//          --|RST          XOUT|-
//            |                 |
//            |             P2.4|<--Capacitive Touch Input 1
//            |                 |
//  LED 2  <--|P1.6             |
//            |                 |
//  LED 1  <--|P1.0             |
//            |                 |
//            |                 |
//
//  November 2014
//   Built with CCS Version: 6.0.1
//
//  Double-size PCB - WARNING - set P2.4 to GND reduce resoluion
//
//******************************************************************************

#include  "msp430g2553.h"

/* Define User Configuration values */
/*----------------------------------*/
/* Defines WDT SMCLK interval for sensor measurements*/
//#define WDT_meas_setting (DIV_SMCLK_512)
#define WDT_meas_setting (DIV_SMCLK_8192)
/* Defines WDT ACLK interval for delay between measurement cycles*/
#define WDT_delay_setting (DIV_ACLK_512)

/* Sensor settings*/
#define PROXIMITY_LVL     20                     // Defines threshold for a key press
/*Set to ~ half the max delta expected*/

/* Definitions for use with the WDT settings*/
#define DIV_ACLK_32768  (WDT_ADLY_1000)     // ACLK/32768
#define DIV_ACLK_8192   (WDT_ADLY_250)      // ACLK/8192
#define DIV_ACLK_512    (WDT_ADLY_16)       // ACLK/512
#define DIV_ACLK_64     (WDT_ADLY_1_9)      // ACLK/64
#define DIV_SMCLK_32768 (WDT_MDLY_32)       // SMCLK/32768
#define DIV_SMCLK_8192  (WDT_MDLY_8)        // SMCLK/8192
#define DIV_SMCLK_512   (WDT_MDLY_0_5)      // SMCLK/512
#define DIV_SMCLK_64    (WDT_MDLY_0_064)    // SMCLK/64

#define LED_1   (0x01)                      // P1.0 LED output
#define LED_2   (0x40)                      // P1.6 LED output

#define SENSOR_DIR  P2DIR
#define SENSOR_PIN  BIT4
#define SENSOR_SEL  P2SEL
#define SENSOR_SEL2 P2SEL2

#define AVERAGE_TIMES       20
#define FAST_SCAN_TIMEOUT   500

// Global variables for sensing
int base_cnt, meas_cnt;
int delta_cnt;
char key_pressed;
int cycles;

/* System Routines*/
void measure_count(void);                   // Measures each capacitive sensor
void pulse_LED(void);                       // LED gradient routine

/* Main Function*/
void main(void)
{
    int i;

    WDTCTL = WDTPW | WDTHOLD;                 // Stop watchdog timer

    // Configure Clocks
    BCSCTL1 = 0x008D;                         // Set DCO to 8MHz
    DCOCTL = 0x009B;
//  f           CALBC1      CALDCO
//  1MHz        0x0087      0x0043
//  8MHz        0x008D      0x009B
//  12MHz       0x008F      0x0006
//  16MHz       0x008F      0x00A4
    BCSCTL3 |= LFXT1S_2;                      // LFXT1 = VLO

    IE1 |= WDTIE;                             // enable WDT interrupt

    // Configure Ports
    P2SEL = 0x00;                             // No XTAL
    P1DIR = LED_1 | LED_2;                    // P1.0 & P1.6 = LEDs
    P1OUT = 0x00;

    __bis_SR_register(GIE);                   // Enable interrupts

    measure_count();                          // Establish baseline capacitance
    base_cnt = meas_cnt;

    for (i = AVERAGE_TIMES; i > 0; i--)       // Repeat and avg base measurement
    {
        measure_count();
        base_cnt = (meas_cnt + base_cnt) >> 1;
    }

    /* Main loop starts here*/
    while (1)
    {
        key_pressed = 0;                        // Assume no keys are pressed

        measure_count();                        // Measure all sensors

        delta_cnt = base_cnt - meas_cnt;        // Calculate delta: c_change

        /* Handle baseline measurment for a base C decrease*/
        if (delta_cnt < 0)                      // If negative: result increased
        {                                       // beyond baseline, i.e. cap dec
            base_cnt = (base_cnt + meas_cnt) >> 1; // Re-average quickly
            delta_cnt = 0;                    // Zero out for pos determination
        }

        // LED2 indicator proximity threshold
        if (delta_cnt > PROXIMITY_LVL)
        {
            P1OUT |= LED_2;
            BCSCTL1 = (BCSCTL1 & 0x0CF) + DIVA_0; // ACLK/(0:1,1:2,2:4,3:8)
            cycles = FAST_SCAN_TIMEOUT;
        }
        else
        {
            cycles--;
            if (cycles > 0)
            {
                P1OUT |= LED_2;
                BCSCTL1 = (BCSCTL1 & 0x0CF) + DIVA_0; // ACLK/(0:1,1:2,2:4,3:8)
            }
            else
            {
                P1OUT &= ~LED_2;
                BCSCTL1 = (BCSCTL1 & 0x0CF) + DIVA_3; // ACLK/(0:1,1:2,2:4,3:8)
                cycles = 0;
            }
        }

        // Fading LED1 depend on proximity level
        for (i = PROXIMITY_LVL; i < 200; i++) // i = 10 to strim out delta_cnt noise
        {

            if (i < delta_cnt)
                P1OUT |= LED_1;
            else
                P1OUT &= ~LED_1;
            //_delay_cycles(15);
        }

//      WDTCTL = WDT_delay_setting; // WDT, ACLK, interval timer - (ACLK / Div) / 512 = normal(42.7ms) : slow(341.3ms)
//
//      __bis_SR_register(LPM3_bits);
    }
}                                           // End Main

/* Measure count result (capacitance) of each sensor*/
/* Routine setup for four sensors, not dependent on NUM_SEN value!*/

void measure_count(void)
{

    TA0CTL = TASSEL_3 + MC_2;                   // TACLK, cont mode
    TA0CCTL1 = CM_3 + CCIS_2 + CAP;             // Pos&Neg,GND,Cap

    P2SEL2 &= ~(BIT2 | BIT3 | BIT5);    // P2.4 -> I/O funtion
    P2SEL &= ~(BIT2 | BIT3 | BIT5);

    P2DIR &= ~(BIT2 | BIT3 | BIT5);     // P2.4 -> Input

//  P2DIR |= (BIT2 | BIT3 | BIT5);      // P2.4 -> Output
//  P2OUT &= ~(BIT2 | BIT3 | BIT5);     // P2.4 -> GND

    /*Configure Ports for relaxation oscillator*/
    /*The P2SEL2 register allows Timer_A to receive it's clock from a GPIO*/
    /*See the Application Information section of the device datasheet for info*/
    SENSOR_DIR &= ~ SENSOR_PIN; // P2.2 is the input used here to get sensor signal
    SENSOR_SEL &= ~ SENSOR_PIN; // PxSEL.y = 0 & PxSEL2.y = 1 to enable Timer_A clock source form sensor signal
    SENSOR_SEL2 |= SENSOR_PIN;

    /*Setup Gate Timer*/
    WDTCTL = WDT_meas_setting; // WDT, SMCLK, interval timer - SCMK/512 = 1MHz/512 = 512us interval
    TA0CTL |= TACLR;                            // Clear Timer_A TAR
    __bis_SR_register(LPM0_bits + GIE);         // Wait for WDT interrupt
    TA0CCTL1 ^= CCIS0; // Create SW capture of CCR1. Because capture mode set at Pos&Neg so that switching input signal between VCC & GND will active capture
    meas_cnt = TACCR1;                      // Save result
    WDTCTL = WDTPW + WDTHOLD;               // Stop watchdog timer
    SENSOR_SEL2 &= ~SENSOR_PIN; // Disable sensor signal line to Timer_A clock source

    TA0CTL = 0;                                 // Stop Timer_A
}

void pulse_LED(void)
{
    if (key_pressed)
    {
        P1OUT ^= (LED_1 | LED_2);
    }
    else
    {
        P1OUT = 0;
    }
}

/* Watchdog Timer interrupt service routine*/
#pragma vector=WDT_VECTOR
__interrupt void watchdog_timer(void)
{
    TA0CCTL1 ^= CCIS0;                        // Create SW capture of CCR1
    __bic_SR_register_on_exit(LPM3_bits);     // Exit LPM3 on reti
}
